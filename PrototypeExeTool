import glob
from PyPDF2 import PdfFileReader, PdfFileWriter
from fpdf import FPDF
import pandas as pd
from tkinter import *
import tkinter as tk
from tkinter import ttk
import subprocess
from tkinter import messagebox
import os


#Relative paths to files used
#Logo
dirLogo = os.path.dirname(__file__)
fileLogo = os.path.join(dirLogo, 'Logo','logo2.ico')

#TC input file
dirExcelTC = os.path.dirname(__file__)
fileExcelTC= os.path.join(dirExcelTC, 'MBD_create_BOM_from_file', 'Input','Input.csv')

#Database file
dirExcelDatabase = os.path.dirname(__file__)
fileExcelDatabase= os.path.join(dirExcelDatabase, 'Resources','Excel_Database','Hydraulics.xlsx')

#Test file
dirTest = os.path.dirname(__file__)
fileTest= os.path.join(dirTest, 'Resources', 'Test.csv')

#Front page
dirFront = os.path.dirname(__file__)
fileFront= os.path.join(dirFront, 'Resources', 'Frontpage.pdf')

#Diagrams
dirDiagrams = os.path.dirname(__file__)
fileDiagrams= os.path.join(dirDiagrams, 'Diagrams')

#Merged Diagrams
dirMerged = os.path.dirname(__file__)
fileMerged = os.path.join(dirMerged, 'MergedDiagrams')

#Batch file
dirBat = os.path.dirname(__file__)
fileBat = os.path.join(dirBat, 'MBD_create_BOM_from_file', 'MBD_create_BOM_from_file_edited.bat')

#-------------------------------------------------------------------------------------------------------

#Read the database file
df = pd.read_excel(fileExcelDatabase, sheet_name='Third proposal', skipinitialspace=True)

#Drop all NaN values
df = df.dropna(axis=0, how='all', thresh=None, subset=None, inplace=False)
df.reset_index(drop=False)

PartnoList = df['Part no']
MakersList = df['Maker choice']
GroupList = df['Group']

listGRoupmakers = df['Maker choice'].groupby(df['Group']).apply(list).reset_index(name='Brands')
listMakers = listGRoupmakers['Brands'].tolist()


#---------GUI-----------
root = tk.Tk()
root.resizable(False, False)
root.title("Hydraulics GUI")

root.iconbitmap(fileLogo)

categories = df['Category'].unique().tolist()
groups = df['Group'].unique().tolist()

#Dictionary to dynamically declare variables

d={}
dInt={}
listIndexVariables = []
listVariables = []
listIntVariables =  []
XVariables = []
for x in range(len(listMakers)):
        d["Var{0}".format(x)] = tk.StringVar()
        dInt["NumVar{0}".format(x)] = tk.StringVar()
        XVariables.append(d)
        listIndexVariables.append(dInt)

   ###### Name and variable in dictionary

for key, value in d.items():
        temp = [key, value]
        listVariables.append(temp[1])

r = 0
answers = []
list_of_widgets = []

def clearComboBox():
    for widget in list_of_widgets:
        widget.set('')

for c in categories:
    ttk.Label(text=c, relief=tk.RIDGE, width=15).grid(row=r,column=0)
    categoriesParts = ttk.Combobox(root, textvariable = listVariables[r], values=listMakers[r],width=10, state="readonly")
    categoriesParts.grid(row=r,column=1)
    list_of_widgets.append(categoriesParts)
    r = r + 1

list_of_Stuffwidgets = []

partNoList = []

# Label texts
lbl = Label(root, text="Input T.C. number", font=("Arial Bold", 12))
lbl.grid(column=4, row=0)

# Input text
txt = Entry(root, width=10)
txt.grid(column=4, row=1)
txt.focus()

#Buttons
def clickedTC():
    res = "T.C. nr. " + txt.get()
    lbl.configure(text=res)
    print("res:", res)

    #Title file for PDF

    pdf = FPDF('L')
    pdf.add_page()
    pdf.set_font("Arial", 'B', size=20)

    pdf.cell(200, 30, txt=res,
            ln=3, align='C')

    pdf.cell(200, 30, txt="Input from TC field",
            ln=5, align='C')

    pdf.output(fileFront)

    #PDF merge
paths = []
maker =df['Maker choice']
answersInt = []
answersCat = []
indexMakerChoice = []
listGroup  = []

####################################
# Check if the TC nr is filled
def next_step():
    if mandatory_entry.get() is False:
        #if:
            # the user entered data in the mandatory entry: proceed to next step
        mandatory_entry.get()
        print(mandatory_entry.get())
            #break
    else:
            # the mandatory field is empty
        messagebox.showerror(title=" Warning!", message="Input TC number!")
        mandatory_entry.focus_set()
            #break

def error_step():
    while True:
        try:
            x = int(input("Please enter a number: "))
            break
        except ValueError:
          print("Oops!  That was no valid number.  Try again...")

mandatory_entry = txt


#LIstMakers are already grouped in the proper groups of Excel

def intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

def merge_pdfs(paths, output):
    for x in range(len(listMakers)):
        answers.append(listVariables[x].get())
        answersCat.append(categories[x])
    ######
    for x in range(len(answers)):
        set1 = df.index[df['Maker choice'].isin([answers[x]])].tolist()
        set2 = df.index[df['Category'].isin([answersCat[x]])].tolist()
        setInt = intersection(set1, set2)
        for sublist in setInt:
                indexMakerChoice.append(sublist)
    #######
    print("indexMakerChoice", indexMakerChoice)
    print("answers", answers)
    listPartNo = df.loc[indexMakerChoice, 'Part no'].tolist()
    print("listPartNo", listPartNo)
    listGroup = df.loc[indexMakerChoice, 'Group'].tolist()
    print("listGroup", listGroup)

    patterns = ['/' + s + '.pdf' for s in listPartNo]
    paths.append(fileFront)
    for pattern in patterns:
        for fn in glob.glob(fileDiagrams + pattern):
            print("fn", fn)
            paths.append(fn)
    print("paths", paths)

    ####CSV
    Qty_csv = list();
    for i in range(len(listGroup)):
        Qty_csv.append(1)

    csvHeader = ['Find_No', 'pos','Part', 'Qty']

    TC_nr = str(txt.get())

    delimiterExcel= "sep=;"

    lst2bat = ['kit',TC_nr]

    #Testing database
    testData = pd.DataFrame(listPartNo)

    firstRow = pd.DataFrame(columns=[delimiterExcel, lst2bat])

    dfcsv = pd.DataFrame(columns=csvHeader)

    dfcsv['Find_No'] = [int(x) * 10 for x in listGroup]
    dfcsv['pos'] = [int(y) * 10 for y in listGroup]
    dfcsv['Part'] = listPartNo
    dfcsv['Qty'] = Qty_csv

    print(dfcsv)
    firstRow.to_csv(fileExcelTC, sep=';', index=False, header=lst2bat, encoding='utf-8')
    dfcsv.to_csv(fileExcelTC, sep=';', index=False, header=csvHeader, encoding='utf-8', mode='a')

    print("testData", testData)
    testData.to_csv(fileTest)

    indexMakerChoice.clear()
    answers.clear()
    answersInt.clear()

    ##############PDFS
    pdf_writer = PdfFileWriter()

    for path in paths:
        pdf_reader = PdfFileReader(path)
        for page in range(pdf_reader.getNumPages()):
            # Add each page to the writer object
            pdf_writer.addPage(pdf_reader.getPage(page))
    # Write out the merged PDF
    with open(output, 'wb') as out:
        pdf_writer.write(out)
    # Clear the files list after configuring
    paths.clear()
    res = txt.get()

#fileMerged


def clearComboBox():
    for widget in list_of_widgets:
        widget.set('')

def start_batch():
    subprocess.call([fileBat])
#To be called in button
printButton_Excel = tk.Button(text='Print Config', command=lambda : [clickedTC(), merge_pdfs(paths, output= os.path.join(dirMerged, 'MergedDiagrams', str(txt.get()) + '.pdf'))], bg='green', fg='white')
printButton_Excel.grid(column=0, row=50)
browseButton_Clear = tk.Button(text='Clear Config', command=clearComboBox, bg='green', fg='white')
browseButton_Clear.grid(column=1, row=50)
browseButton_TC = tk.Button(text='Send to TC', command=start_batch, bg='blue', fg='white')
browseButton_TC.grid(column=4, row=50)
answers.clear()

mainloop()
